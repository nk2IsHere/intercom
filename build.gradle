import java.text.SimpleDateFormat

plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.4.20'
    id 'org.jetbrains.kotlin.jvm' version '1.4.20'
    id 'org.jetbrains.kotlin.plugin.noarg' version '1.4.20'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.16.0'
}

repositories {
    mavenCentral()
}

def gitTag = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

def buildProjects = { ->
    return subprojects.findAll { new File(it.projectDir, 'build.gradle').file  }
}

def internalProjects = { ->
    return buildProjects().findAll { it.name.endsWith("-internal") || it.projectDir.path.substring(rootProject.projectDir.path.length()).contains('internal') }
}

def libraryProjects = { ->
    return buildProjects().findAll { !internalProjects().contains(it)  }
}

configure(buildProjects()) {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.noarg'

    group = "eu.nk2"
    version = gitTag().split("-").first() // Publisher does not support versions with -
    java.sourceCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.nk2.eu/artifactory/gradle-release' }
    }

    compileJava.inputs.files(processResources)

    test {
        useJUnitPlatform()
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '1.8'
            languageVersion = "1.3"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '1.8'
        }
    }
}

configure(libraryProjects()) {
    apply plugin: 'maven-publish'

    jar {
        manifest {
            attributes(
                'Project-Name': project.name,
                'Version': gitTag(),
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
            )
        }
    }

    bootJar {
        launchScript()
        manifest {
            attributes(
                'Project-Name': project.name,
                'Version': gitTag(),
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
            )
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
//        file "$buildDir/libs/${project.name}-${project.version}.jar"
    }

    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        publish {
            repository {
                repoKey = "${artifactory_repoPublish}"
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true
            }
            defaults {
                publications('mavenJava')
                publishBuildInfo = false
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
//                artifact "$buildDir/libs/${project.name}-${project.version}.jar"
            }
        }
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    eclipse {
        classpath {
            downloadSources = true
        }
    }

    // Tell idea to output to build/classes/main instead of /out/
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
        defaults {
            publishArtifacts = false
        }
    }
    resolve {
        repository {
            repoKey = "${artifactory_repoResolve}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}
